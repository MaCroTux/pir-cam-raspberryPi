#!/usr/bin/python

import RPi.GPIO as GPIO
import time
import datetime
import picamera
import requests
import subprocess

PIR             = 23
BUZZER          = 22
IR_LED		= 18

url = 'http://javierferia.com/pir-sensor.php'
headers = {'content-type': 'application/json', 'Accept-Charset': 'UTF-8'}
uploadVideoCommand = './uploadVideo'

BUZZER_ON	= True

BUZZER_PITCH    = 2.0
BUZZER_DURATION = 2.0
	
SLEEP_BIG       = 4
SLEEP_WAIT	= 2
SLEEP_BUCLE     = 0.1
SLEEP_STABILIZE = 1

REC_TIME        = 2

GPIO.setmode(GPIO.BCM)
GPIO.setup(PIR, GPIO.IN) #PIR
GPIO.setup(BUZZER, GPIO.OUT) #BUzzer
GPIO.setup(IR_LED, GPIO.OUT)

detected = False

def notify(time, message):
	payload = '{"message":"' + message + '", "time":"' + str(time) + '"}'
	requests.post(url, data=payload, headers=headers)

def printN(message):
	print(date() + message)
	notify(timestamp(), message)

def buzz(pitch, duration):   #create the function "buzz" and feed it the pitch and duration)
	if BUZZER_ON is not True:
		return

	period = 1.0 / pitch     #in physics, the period (sec/cyc) is the inverse of the frequency (cyc/sec)
	delay = period / 2     #calcuate the time for half of the wave
	cycles = int(duration * pitch)   #the number of waves to produce is the duration times the frequency

	for i in range(cycles):    #start a loop from 0 to the variable "cycles" calculated above
		GPIO.output(BUZZER, True)   #set pin 18 to high
		time.sleep(delay)    #wait with pin 18 high
		GPIO.output(BUZZER, False)    #set pin 18 to low
		time.sleep(delay)    #wait with pin 18 low

def date():
	ts = time.time()
	return "[" + datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S') + "] "

def dateRaw():
        ts = time.time()
        return datetime.datetime.fromtimestamp(ts).strftime('%Y%m%d_%H%M%S')

def timestamp():
	return time.time()

def recordCamera(fileName, time):
	printN("Iniciando grabando en " + fileName + " durante " + str(time) + "seg")
	GPIO.output(IR_LED, True)
	ir = GPIO.PWM(IR_LED, 100)
	ir.start(100)
        with picamera.PiCamera() as picam:
                picam.resolution = (1920, 1080)
                picam.ISO=800
                picam.start_recording(fileName, format='h264', quality=30)
                picam.wait_recording(float(time))
                picam.stop_recording()
		printN("Fin de grabacion")
                picam.close()

	ir.ChangeDutyCycle(0)

try:
	time.sleep(SLEEP_STABILIZE) # to stabilize sensor
	buzz(3, 1)
	printN("Sensor iniciado")
	while True:

		if not GPIO.input(PIR):
		
			if detected:
				printN("Iniciando grabacion en camara 1")
				nameVideo = 'video'+dateRaw()+'.h264'
				recordCamera('/home/pi/pir-sensor-cam/videos/' + nameVideo, REC_TIME)
				subprocess.Popen([uploadVideoCommand, nameVideo])
				printN("Esperando find de movimientos")
				time.sleep(SLEEP_WAIT)
				if GPIO.input(PIR):
					printN("Armando sensor")
					buzz(1.0, 1.0)
					time.sleep(1)
					detected = False
				continue	
	
			if not detected:
				printN("Movimiento detectado")
				detected = True
				buzz(BUZZER_PITCH, BUZZER_DURATION)			
				time.sleep(SLEEP_WAIT) #to avoid multiple detection
	
		time.sleep(SLEEP_BUCLE) #loop delay, should be less than detection delay
	
except:
	printN("Error")
	GPIO.cleanup()

